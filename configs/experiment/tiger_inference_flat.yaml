# @package _global_
data_dir: ???
semantic_id_path: ???
ckpt_path: ???
num_hierarchies: ???
seed: 42
sequence_length: 120

model:
  huggingface_model:
    _target_: transformers.T5EncoderModel
    config:
      _target_: transformers.T5Config
      vocab_size: 256
      d_model: 128
      num_heads: 6
      dropout_rate: 0.15
      d_ff: 1024
      d_kv: 64
      num_layers: 4
  _target_: src.models.modules.semantic_id.tiger_generation_model.SemanticIDEncoderDecoder
  feature_to_model_input_map:
    sequence_data: input_ids
    user_id: user_id
  postprocessor: null
  aggregator: null
  loss_function: null
  optimizer: null
  scheduler: null
  evaluator: null
  weight_tying: true
  compile: false
  decoder:
    _target_: transformers.models.t5.modeling_t5.T5Stack
    config:
      _target_: transformers.models.t5.configuration_t5.T5Config
      vocab_size: ${model.huggingface_model.config.vocab_size}
      d_model: ${model.huggingface_model.config.d_model}
      num_heads: ${model.huggingface_model.config.num_heads}
      dropout_rate: 0.15
      d_ff: ${model.huggingface_model.config.d_ff}
      d_kv: ${model.huggingface_model.config.d_kv}
      num_layers: 4
      is_decoder: true
      is_encoder_decoder: false
    embed_tokens:
      _target_: torch.nn.Embedding
      num_embeddings: ${model.huggingface_model.config.vocab_size}
      embedding_dim: ${model.huggingface_model.config.d_model}
  num_hierarchies: ${num_hierarchies}
  num_user_bins: null
  codebooks: ${data_loading.predict_dataloader_config.dataloader.dataset_config.semantic_id_map.sequence_data}
  mlp_layers: 2
  top_k_for_generation: 10
task_name: inference
id: ${now:%Y-%m-%d}/${now:%H-%M-%S}
tags:
- amazon-p5-gr-train
callbacks:
  bq_writer: null
  pickle_writer:
    _target_: src.utils.inference_utils.LocalPickleWriter
    output_dir: ${paths.output_dir}/pickle
    flush_frequency: 100000
    write_interval: batch
    should_merge_files_on_main: true
    prediction_key_name: user_id
    prediction_name: semantic_ids
paths:
  root_dir: .
  data_dir: ${data_dir}
  log_dir: ${paths.root_dir}/logs
  output_dir: ${hydra:runtime.output_dir}
  work_dir: ${hydra:runtime.cwd}
  profile_dir: ${hydra:run.dir}/profile_output
  metadata_dir: ${paths.output_dir}/metadata
logger:
  csv:
    _target_: lightning.pytorch.loggers.csv_logs.CSVLogger
    save_dir: ${paths.output_dir}
    name: csv/
    prefix: ''
trainer:
  _target_: lightning.pytorch.trainer.Trainer
  default_root_dir: ${paths.output_dir}
  min_steps: 1
  max_steps: 80000
  max_epochs: 10
  accelerator: gpu
  devices: -1
  num_nodes: 1
  precision: bf16-mixed
  log_every_n_steps: 2500
  val_check_interval: 5000
  deterministic: false
  accumulate_grad_batches: 1
  profiler:
    _target_: lightning.pytorch.profilers.PassThroughProfiler
  strategy: ddp
  sync_batchnorm: true
data_loading:
  features_config:
    features:
    - name: sequence_data
      num_placeholder_tokens: 0
      num_placeholder_tokens_sparse_ids: 2
      semantic_ids: ???
      is_item_ids: true
      type:
        _target_: torch.__dict__.get
        _args_:
        - int32
    - name: embedding
      type:
        _target_: torch.__dict__.get
        _args_:
        - float32
    - name: text
      type:
        _target_: torch.__dict__.get
        _args_:
        - bytes
    - name: user_id
      is_item_ids: true
      type:
        _target_: torch.__dict__.get
        _args_:
        - int32
  dataset_config:
    dataset:
      _target_: src.data.loading.components.interfaces.SemanticIDDatasetConfig
      user_id_field: user_id
      min_sequence_length: 1
      iterate_per_row: true
      keep_user_id: true
      features_to_consider: ${extract_fields_from_list_of_dicts:${data_loading.features_config.features},
        "name", False, "is_item_ids", "True"}
      num_placeholder_tokens_map: ${create_map_from_list_of_dicts:${data_loading.features_config.features},
        "name", "num_placeholder_tokens"}
      semantic_id_map: ${create_map_from_list_of_dicts:${data_loading.features_config.features},
        "name", "semantic_ids"}
      data_iterator:
        _target_: src.data.loading.components.iterators.TFRecordIterator
      preprocessing_functions:
      - _target_: src.data.loading.components.pre_processing.filter_features_to_consider
        _partial_: true
      - _target_: src.data.loading.components.pre_processing.convert_to_dense_numpy_array
        _partial_: true
      - _target_: src.data.loading.components.pre_processing.convert_fields_to_tensors
        _partial_: true
      - _target_: src.data.loading.components.pre_processing.map_sparse_id_to_semantic_id
        _partial_: true
        features_to_apply:
        - sequence_data
        num_hierarchies: ${model.num_hierarchies}
  predict_dataloader_config:
    dataloader:
      _target_: src.data.loading.components.interfaces.SequenceDataloaderConfig
      dataset_class:
        _target_: src.data.loading.components.dataloading.UnboundedSequenceIterable
        _partial_: true
      data_folder: ${paths.data_dir}/testing
      should_shuffle_rows: false
      labels: ~
      batch_size_per_device: 32
      num_workers: 8
      timeout: 60
      assign_files_by_size: true
      oov_token: null
      masking_token: 1
      sequence_length: ${sequence_length}
      padding_token: -1
      drop_last: false
      persistent_workers: false
      collate_fn:
        _target_: src.data.loading.components.collate_functions.collate_fn_inference_for_sequence
        _partial_: true
        sequence_length: ${data_loading.predict_dataloader_config.dataloader.sequence_length}
        padding_token: ${data_loading.predict_dataloader_config.dataloader.padding_token}
        id_field_name: ${data_loading.predict_dataloader_config.dataloader.dataset_config.user_id_field}
      dataset_config:
        _target_: src.data.loading.components.interfaces.SemanticIDDatasetConfig
        user_id_field: user_id
        min_sequence_length: 1
        iterate_per_row: true
        keep_user_id: true
        features_to_consider: ${extract_fields_from_list_of_dicts:${data_loading.features_config.features},
          "name", False, "is_item_ids", "True"}
        num_placeholder_tokens_map: ${create_map_from_list_of_dicts:${data_loading.features_config.features},
          "name", "num_placeholder_tokens"}
        semantic_id_map:
          sequence_data:
            _target_: torch.load
            _args_:
            - _target_: src.utils.file_utils.open_local_or_remote
              file_path: ${semantic_id_path}
              mode: rb
        data_iterator:
          _target_: src.data.loading.components.iterators.TFRecordIterator
        preprocessing_functions:
        - _target_: src.data.loading.components.pre_processing.filter_features_to_consider
          _partial_: true
        - _target_: src.data.loading.components.pre_processing.convert_to_dense_numpy_array
          _partial_: true
        - _target_: src.data.loading.components.pre_processing.convert_fields_to_tensors
          _partial_: true
        - _target_: src.data.loading.components.pre_processing.map_sparse_id_to_semantic_id
          _partial_: true
          features_to_apply:
          - sequence_data
          num_hierarchies: ${model.num_hierarchies}
      pin_memory: false
  datamodule:
    _target_: src.data.loading.datamodules.sequence_datamodule.SequenceDataModule
    predict_dataloader_config: ${..predict_dataloader_config.dataloader}
extras:
  ignore_warnings: false
  enforce_tags: true
  print_config_warnings: true
  print_config: true

